{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/mandelbrot.worker.js","webpack:///./src/scripts/mandelbrot.js","webpack:///./src/scripts/colors.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Worker","CANVAS_WIDTH","window","innerWidth","CANVAS_HEIGHT","innerHeight","MAX_ITERATIONS","BAILOUT_RADIUS","MAX_COLORS","MAX_WORKERS","PAN_INCREMENT","zoomFactor","currentColors","g","b","COLORS","currentMinReal","currentMaxReal","currentMinImaginary","currentMaxImaginary","canvasContainer","document","getElementById","myCanvas","width","height","X_OFFSET","offsetLeft","Y_OFFSET","offsetTop","context","getContext","calcRealFactor","maxReal","minReal","calcImaginaryFactor","maxImaginary","minImaginary","interpolate","start","end","interpolation","drawMandelbrot","maxColors","colors","createInterpolant","xs","ys","length","Error","result","indexes","push","sort","a","oldXs","oldYs","dys","dxs","ms","dx","dy","c1s","mNext","dx_","dxNext","common","c2s","c3s","c1","m_","invDx","common_","x","j","mid","low","high","Math","floor","xHere","max","diff","diffSq","createChannelArray","array","interpolant","xSquared","rArray","gArray","bArray","colorArray","createColors","ratio","abs","sratio","xf","yf","realFactor","imaginaryFactor","worker","mandelbrot_worker_default","postMessage","onmessage","e","points","data","point","y","fillStyle","currentX","fillRect","dimens","dimenObj","0","1","2","3","fn","textContent","setInfo","handleZoom","event","zoomStep","preventDefault","mouseReal","clientX","mouseImaginary","clientY","deltaReal","deltaImaginary","applyZoom","addEventListener","update","colorData","colorNumber","round","rgb","getElementsByClassName","jscolor","hide","pan","direction","panTypes","[object Object]","increment","min","handlePan"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"8303ecd55cc23629f93c.worker.js\");\n};","import createColors from './colors.js';\nimport Worker from './mandelbrot.worker';\n\n\nconst CANVAS_WIDTH = window.innerWidth;\nconst CANVAS_HEIGHT = window.innerHeight;\nconst MAX_ITERATIONS = 1000;\nconst BAILOUT_RADIUS = 2 ** 8;\nconst MAX_COLORS = 2 ** 11;\n\n\n// Default values for initialization\n\nconst MAX_WORKERS = 6;\nconst DEF_MIN_REAL = -2;\nconst DEF_MAX_REAL = 1.3;\nconst DEF_MIN_IMAGINARY = -1.4;\nconst DEF_MAX_IMAGINARY = 1.5;\n\n// Zoom and Pan constants\nconst ZOOM_STEP = 1.5;\nconst PAN_INCREMENT = 0.02;\nlet zoomFactor = 1;\n\n// Colors\nconst DEFAULT_COLORS = [\n  { r: 0, g: 7, b: 100 },\n  { r: 32, g: 107, b: 203 },\n  { r: 237, g: 255, b: 255 },\n  { r: 255, g: 170, b: 0 },\n  { r: 0, g: 2, b: 0 },\n\n];\nconst currentColors = DEFAULT_COLORS;\nlet COLORS = [];\n\nlet currentMinReal = DEF_MIN_REAL;\nlet currentMaxReal = DEF_MAX_REAL;\nlet currentMinImaginary = DEF_MIN_IMAGINARY;\nlet currentMaxImaginary = DEF_MAX_IMAGINARY;\n\n\n// Set up canvas\nconst canvasContainer = document.getElementById('canvas-container');\nconst myCanvas = document.getElementById('canvas');\nmyCanvas.width = CANVAS_WIDTH;\nmyCanvas.height = CANVAS_HEIGHT;\nconst X_OFFSET = myCanvas.offsetLeft;\nconst Y_OFFSET = myCanvas.offsetTop;\nconst context = myCanvas.getContext('2d');\n\nfunction calcRealFactor(maxReal, minReal) {\n  return (maxReal - minReal) / (CANVAS_WIDTH);\n}\n\nfunction calcImaginaryFactor(maxImaginary, minImaginary) {\n  return (maxImaginary - minImaginary) / (CANVAS_HEIGHT);\n}\n\nfunction interpolate(start, end, interpolation) {\n  return start + ((end - start) * interpolation);\n}\n\nfunction setInfo(dimens) {\n  const dimenObj = {\n    0() {\n      return document.getElementById('minReal');\n    },\n    1() {\n      return document.getElementById('maxReal');\n    },\n    2() {\n      return document.getElementById('minImag');\n    },\n    3() {\n      return document.getElementById('maxImag');\n    },\n  };\n  for (let i = 0; i < dimens.length; i++) {\n    const fn = dimenObj[i];\n    if (fn) {\n      const dimenSpan = fn();\n      dimenSpan.textContent = dimens[i];\n    }\n  }\n}\n\nfunction drawMandelbrot(minReal, maxReal, minImaginary, maxImaginary) {\n  // Generate colors\n  COLORS = createColors(MAX_COLORS, currentColors);\n  // Correct for aspect ratio\n  const ratio = Math.abs(maxReal - minReal) / Math.abs(maxImaginary - minImaginary);\n  const sratio = CANVAS_WIDTH / CANVAS_HEIGHT;\n  if (sratio > ratio) {\n    const xf = sratio / ratio;\n    minReal *= xf;\n    maxReal *= xf;\n  } else {\n    const yf = ratio / sratio;\n    minImaginary *= yf;\n    maxImaginary *= yf;\n  }\n\n  // Calculate factors to convert X and Y to real and imaginary components of a compelx number\n  const realFactor = calcRealFactor(maxReal, minReal);\n  const imaginaryFactor = calcImaginaryFactor(maxImaginary, minImaginary);\n\n  // Create worker threads and have each thread handle one column of data\n  for (let x = 0; x < MAX_WORKERS; x++) {\n    const worker = new Worker();\n    worker.postMessage({\n      MAX_ITERATIONS,\n      BAILOUT_RADIUS,\n      x,\n      CANVAS_HEIGHT,\n      COLORS,\n      realFactor,\n      imaginaryFactor,\n      minReal,\n      maxReal,\n      minImaginary,\n      maxImaginary,\n    });\n    worker.onmessage = function (e) {\n      const { points } = e.data;\n      for (let i = 0; i < points.length; i++) {\n        const point = points[i];\n        const { y, fillStyle } = point;\n        const currentX = e.data.x;\n        context.fillStyle = fillStyle;\n        context.fillRect(currentX, y, 1, 1);\n      }\n      let currentX = e.data.x;\n      // Start work on the column MAX_WORKERS down the axis\n      currentX += MAX_WORKERS;\n      // If we haven't reached the end of the canvas\n      if (currentX < CANVAS_WIDTH) {\n        worker.postMessage({\n          MAX_ITERATIONS,\n          BAILOUT_RADIUS,\n          x: currentX,\n          CANVAS_HEIGHT,\n          COLORS,\n          realFactor,\n          imaginaryFactor,\n          minReal,\n          maxReal,\n          minImaginary,\n          maxImaginary,\n        });\n      }\n    };\n  }\n  setInfo([currentMinReal, currentMaxReal, currentMinImaginary, currentMaxImaginary]);\n}\n\nfunction applyZoom(mouseReal, mouseImaginary) {\n  // Create a new zoomed in view rectangle\n  const interpolation = 1.0 / zoomFactor;\n  currentMinReal = interpolate(mouseReal, currentMinReal, interpolation);\n  currentMinImaginary = interpolate(mouseImaginary, currentMinImaginary, interpolation);\n  currentMaxReal = interpolate(mouseReal, currentMaxReal, interpolation);\n  currentMaxImaginary = interpolate(mouseImaginary, currentMaxImaginary, interpolation);\n\n  // Center on the mouse click\n  const centerReal = (currentMinReal + currentMaxReal) / 2;\n  const centerImaginary = (currentMinImaginary + currentMaxImaginary) / 2;\n  const deltaReal = centerReal - mouseReal;\n  const deltaImaginary = centerImaginary - mouseImaginary;\n\n  currentMinReal -= deltaReal;\n  currentMaxReal -= deltaReal;\n  currentMinImaginary -= deltaImaginary;\n  currentMaxImaginary -= deltaImaginary;\n}\n\nfunction handleZoom(event, zoomStep) {\n  event.preventDefault();\n  const realFactor = calcRealFactor(currentMaxReal, currentMinReal);\n  const imaginaryFactor = calcImaginaryFactor(currentMaxImaginary, currentMinImaginary);\n  const mouseReal = currentMinReal + (event.clientX - X_OFFSET) * realFactor;\n  const mouseImaginary = currentMinImaginary + (event.clientY - Y_OFFSET) * imaginaryFactor;\n  zoomFactor *= zoomStep;\n  applyZoom(mouseReal, mouseImaginary);\n  drawMandelbrot(currentMinReal, currentMaxReal, currentMinImaginary, currentMaxImaginary);\n}\n\ndrawMandelbrot(currentMinReal, currentMaxReal, currentMinImaginary, currentMaxImaginary);\n\ncanvasContainer.addEventListener('click', (e) => {\n  handleZoom(e, ZOOM_STEP);\n});\n\ncanvasContainer.addEventListener('contextmenu', (e) => {\n  handleZoom(e, 1 / ZOOM_STEP);\n});\n\n// handle color picking\nwindow.update = function (colorData, colorNumber) {\n  const r = Math.round(colorData.rgb[0]);\n  const g = Math.round(colorData.rgb[1]);\n  const b = Math.round(colorData.rgb[2]);\n  currentColors[colorNumber] = { r, g, b };\n  drawMandelbrot(currentMinReal, currentMaxReal, currentMinImaginary, currentMaxImaginary);\n  document.getElementsByClassName('jscolor')[colorNumber].jscolor.hide();\n};\n\nfunction handlePan(direction) {\n  const panTypes = {\n    0() {\n      // up\n      currentMinImaginary += increment;\n      currentMaxImaginary += increment;\n    },\n    1() {\n      // right\n      currentMinReal += increment;\n      currentMaxReal += increment;\n    },\n    2() {\n      // down\n      currentMinImaginary -= increment;\n      currentMaxImaginary -= increment;\n    },\n    3() {\n      // left\n      currentMinReal -= increment;\n      currentMaxReal -= increment;\n    },\n  };\n  const increment = Math.min(\n    Math.abs(currentMinImaginary * PAN_INCREMENT),\n    Math.abs(currentMaxImaginary * PAN_INCREMENT),\n  );\n  const fn = panTypes[direction];\n  if (fn) {\n    fn();\n    drawMandelbrot(currentMinReal, currentMaxReal, currentMinImaginary, currentMaxImaginary);\n  }\n}\n\nwindow.pan = function (direction) {\n  // handle panning\n  handlePan(direction);\n};\n","// Source: https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\nexport default function createColors(maxColors, colors) {\n  const createInterpolant = function (xs, ys) {\n    let i = xs.length;\n    const { length } = xs;\n\n    // Deal with length issues\n    if (length !== ys.length) { throw new Error('Need an equal count of xs and ys.'); }\n    if (length === 0) { return function () { return 0; }; }\n    if (length === 1) {\n      // Impl: Precomputing the result prevents problems\n      // if ys is mutated later and allows garbage collection of ys\n      // Impl: Unary plus properly converts values to numbers\n      const result = +ys[0];\n      return function () { return result; };\n    }\n\n    // Rearrange xs and ys so that xs is sorted\n    const indexes = [];\n    for (i = 0; i < length; i++) { indexes.push(i); }\n    indexes.sort((a, b) => (xs[a] < xs[b] ? -1 : 1));\n    const oldXs = xs;\n    const oldYs = ys;\n    // Impl: Creating new arrays also prevents problems if the input arrays are mutated later\n    xs = []; ys = [];\n    // Impl: Unary plus properly converts values to numbers\n    for (i = 0; i < length; i++) { xs.push(+oldXs[indexes[i]]); ys.push(+oldYs[indexes[i]]); }\n\n    // Get consecutive differences and slopes\n    const dys = [];\n    const dxs = [];\n    const ms = [];\n    for (i = 0; i < length - 1; i++) {\n      const dx = xs[i + 1] - xs[i];\n      const dy = ys[i + 1] - ys[i];\n      dxs.push(dx); dys.push(dy); ms.push(dy / dx);\n    }\n\n    // Get degree-1 coefficients\n    const c1s = [ms[0]];\n    for (i = 0; i < dxs.length - 1; i++) {\n      const m = ms[i];\n      const mNext = ms[i + 1];\n      if (m * mNext <= 0) {\n        c1s.push(0);\n      } else {\n        const dx_ = dxs[i];\n        const dxNext = dxs[i + 1];\n        const common = dx_ + dxNext;\n        c1s.push(3 * common / ((common + dxNext) / m + (common + dx_) / mNext));\n      }\n    }\n    c1s.push(ms[ms.length - 1]);\n\n    // Get degree-2 and degree-3 coefficients\n    const c2s = [];\n    const c3s = [];\n    for (i = 0; i < c1s.length - 1; i++) {\n      const c1 = c1s[i];\n      const m_ = ms[i];\n      const invDx = 1 / dxs[i];\n      const common_ = c1 + c1s[i + 1] - m_ - m_;\n      c2s.push((m_ - c1 - common_) * invDx); c3s.push(common_ * invDx * invDx);\n    }\n\n    // Return interpolant function\n    return function (x) {\n      // The rightmost point in the dataset should give an exact result\n      let j = xs.length - 1;\n      if (x === xs[j]) { return ys[j]; }\n\n      // Search for the interval x is in,\n      // returning the corresponding y if x is one of the original xs\n      let low = 0;\n      let mid;\n      let high = c3s.length - 1;\n      while (low <= high) {\n        mid = Math.floor(0.5 * (low + high));\n        const xHere = xs[mid];\n        if (xHere < x) {\n          low = mid + 1;\n        } else if (xHere > x) {\n          high = mid - 1;\n        } else { return ys[mid]; }\n      }\n      j = Math.max(0, high);\n\n      // Interpolate\n      const diff = x - xs[j];\n      const diffSq = diff * diff;\n      return ys[j] + c1s[j] * diff + c2s[j] * diffSq + c3s[j] * diff * diffSq;\n    };\n  };\n\n\n  function createChannelArray(array, interpolant) {\n    for (let x = 0; x < 1; x += 1 / maxColors) {\n      const xSquared = interpolant(x);\n      array.push(xSquared);\n    }\n  }\n\n  const rArray = [];\n  const gArray = [];\n  const bArray = [];\n\n  createChannelArray(\n    rArray,\n    createInterpolant(\n      [0, 0.16, 0.42, 0.6425, 0.8575],\n      [colors[0].r, colors[1].r, colors[2].r, colors[3].r, colors[4].r],\n    ),\n  );\n  createChannelArray(\n    gArray,\n    createInterpolant(\n      [0, 0.16, 0.42, 0.6425, 0.8575],\n      [colors[0].g, colors[1].g, colors[2].g, colors[3].g, colors[4].g],\n    ),\n  );\n  createChannelArray(\n    bArray,\n    createInterpolant(\n      [0, 0.16, 0.42, 0.6425, 0.8575],\n      [colors[0].b, colors[1].b, colors[2].b, colors[3].b, colors[4].b],\n    ),\n  );\n\n  const colorArray = [];\n  for (let i = 0; i < bArray.length; i++) {\n    colorArray.push(`rgb(${rArray[i]},${gArray[i]},${bArray[i]})`);\n  }\n  return colorArray;\n}\n"],"sourceRoot":""}