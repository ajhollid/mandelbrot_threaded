{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/utils.js","webpack:///./src/scripts/mandelbrot.worker.js","webpack:///./src/scripts/mandelbrot.js","webpack:///./src/scripts/colors.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","calcRealFactor","maxReal","minReal","CANVAS_WIDTH","calcImaginaryFactor","maxImaginary","minImaginary","CANVAS_HEIGHT","interpolate","start","end","interpolation","handleZoom","event","zoomStep","zoomFactor","dimens","X_OFFSET","Y_OFFSET","newZoomFactor","currentDimens","preventDefault","realFactor","imaginaryFactor","mouseReal","mouseImaginary","newDimens","deltaReal","deltaImaginary","applyZoom","clientX","clientY","handlePan","direction","PAN_INCREMENT","increment","Math","min","abs","fn","0","1","2","3","Worker","app","options","iterations","escapeRadius","window","innerWidth","innerHeight","DEFAULT_DIMENS","myCanvas","document","getElementById","width","height","offsetLeft","offsetTop","context","getContext","DEFAULT_COLORS","g","b","currentColors","slice","colorArray","get_max_wokers","get_def_max_iterations","get_def_escape_radius","get_def_zoom_step","get_options","set_options_value","get_canvas","get_drawing_context","get_canvas_width","get_canvas_height","get_def_dimens","get_x_offset","get_y_offset","get_pan_increment","get_zoom_factor","set_zoom_factor","zf","get_current_dimens","set_current_dimens","get_max_colors","get_def_colors","get_current_colors","set_current_colors","colors","set_current_color_single_color","color","get_color_array","set_color_array","array","drawMandelbrot","userOptions","maxColors","createInterpolant","xs","ys","length","Error","result","indexes","push","sort","a","oldXs","oldYs","dys","dxs","ms","dx","dy","c1s","mNext","dx_","dxNext","common","c2s","c3s","c1","m_","invDx","common_","x","j","mid","low","high","floor","xHere","max","diff","diffSq","createChannelArray","interpolant","xSquared","rArray","gArray","bArray","createColors","ratio","sratio","xf","yf","utils_default","workerFunction","e","points","data","y","fillStyle","fillRect","currentX","this","postMessage","worker","mandelbrot_worker_default","onmessage","dimenObj","keys","textContent","optionsObj","setInfo","body","getElementsByTagName","addEventListener","zoomResults","href","toDataURL","elementsToBlock","getElementsByClassName","stopPropagation","updateColor","colorData","gradientPosition","rgb","map","colorChannel","round","jscolor","hide","pan","updateMandelbrot","userIterations","parseInt","parseFloat","handleZoomStep","reset","inputs","fromRGB"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","function calcRealFactor(maxReal, minReal, CANVAS_WIDTH) {\n  return (maxReal - minReal) / (CANVAS_WIDTH);\n}\n\nfunction calcImaginaryFactor(maxImaginary, minImaginary, CANVAS_HEIGHT) {\n  return (maxImaginary - minImaginary) / (CANVAS_HEIGHT);\n}\n\nfunction interpolate(start, end, interpolation) {\n  return start + ((end - start) * interpolation);\n}\n\nfunction applyZoom(mouseReal, mouseImaginary, zoomFactor, currentDimens) {\n  const newDimens = currentDimens;\n  // Create a new zoomed in view rectangle\n  const interpolation = 1.0 / zoomFactor;\n  newDimens.minReal = interpolate(mouseReal, newDimens.minReal, interpolation);\n  newDimens.maxReal = interpolate(mouseReal, newDimens.maxReal, interpolation);\n  newDimens.minImaginary = interpolate(mouseImaginary, newDimens.minImaginary, interpolation);\n  newDimens.maxImaginary = interpolate(mouseImaginary, newDimens.maxImaginary, interpolation);\n\n  // Center on the mouse click\n  const centerReal = (newDimens.minReal + newDimens.maxReal) / 2;\n  const centerImaginary = (newDimens.minImaginary + newDimens.maxImaginary) / 2;\n  const deltaReal = centerReal - mouseReal;\n  const deltaImaginary = centerImaginary - mouseImaginary;\n\n  newDimens.minReal -= deltaReal;\n  newDimens.maxReal -= deltaReal;\n  newDimens.minImaginary -= deltaImaginary;\n  newDimens.maxImaginary -= deltaImaginary;\n  return newDimens;\n}\n\nfunction handleZoom(\n  event,\n  zoomStep, zoomFactor, dimens, CANVAS_WIDTH, CANVAS_HEIGHT, X_OFFSET, Y_OFFSET,\n) {\n  let newZoomFactor = zoomFactor;\n  let currentDimens = dimens;\n  event.preventDefault();\n  const realFactor = calcRealFactor(\n    currentDimens.maxReal,\n    currentDimens.minReal,\n    CANVAS_WIDTH,\n  );\n  const imaginaryFactor = calcImaginaryFactor(\n    currentDimens.maxImaginary,\n    currentDimens.minImaginary,\n    CANVAS_HEIGHT,\n  );\n\n  const mouseReal = currentDimens.minReal + (event.clientX - X_OFFSET) * realFactor;\n  const mouseImaginary = currentDimens.minImaginary + (event.clientY - Y_OFFSET) * imaginaryFactor;\n  newZoomFactor *= zoomStep;\n  currentDimens = applyZoom(mouseReal, mouseImaginary, newZoomFactor, currentDimens);\n  return { currentDimens, zoomFactor };\n}\n\n// Handles panning around the image via control buttons\nfunction handlePan(direction, PAN_INCREMENT, dimens) {\n  const currentDimens = dimens;\n  // Get the min increment to pan by\n  const increment = Math.min(\n    Math.abs(currentDimens.minImaginary * PAN_INCREMENT),\n    Math.abs(currentDimens.maxImaginary * PAN_INCREMENT),\n  );\n  // Pan object literal for lookup\n  const panTypes = {\n    0: () => {\n      // up\n      currentDimens.minImaginary += increment;\n      currentDimens.maxImaginary += increment;\n    },\n    1: () => {\n      // right\n      currentDimens.minReal -= increment;\n      currentDimens.maxReal -= increment;\n    },\n    2: () => {\n      // down\n      currentDimens.minImaginary -= increment;\n      currentDimens.maxImaginary -= increment;\n    },\n    3: () => {\n      // left\n      currentDimens.minReal += increment;\n      currentDimens.maxReal += increment;\n    },\n  };\n\n  const fn = panTypes[direction];\n  if (fn) {\n    fn();\n  } return currentDimens;\n}\n\nmodule.exports = {\n  calcRealFactor,\n  calcImaginaryFactor,\n  handleZoom,\n  handlePan,\n};\n\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"4754bcdf690e26961eec.worker.js\");\n};","import createColors from './colors';\nimport Worker from './mandelbrot.worker';\nimport Utils from './utils';\n\nconst app = (function () {\n// Key values for generating set\n  const MAX_WORKERS = 6;\n  const DEF_MAX_ITERATIONS = 1000;\n  const DEF_ESCAPE_RADIUS = 2 ** 8;\n  const DEF_ZOOM_STEP = 1.5;\n\n  const options = {\n    iterations: DEF_MAX_ITERATIONS,\n    escapeRadius: DEF_ESCAPE_RADIUS,\n    zoomStep: DEF_ZOOM_STEP,\n  };\n\n  // Dimens for drawing\n  const CANVAS_WIDTH = window.innerWidth;\n  const CANVAS_HEIGHT = window.innerHeight;\n  const DEFAULT_DIMENS = {\n    minReal: -2,\n    maxReal: 1.3,\n    minImaginary: -1.4,\n    maxImaginary: 1.5,\n  };\n\n  // Values for zooming\n  const PAN_INCREMENT = 0.02;\n  let zoomFactor = 1;\n  let currentDimens = {};\n\n\n  // Set up canvas\n  const myCanvas = document.getElementById('canvas');\n  myCanvas.width = CANVAS_WIDTH;\n  myCanvas.height = CANVAS_HEIGHT;\n  const X_OFFSET = myCanvas.offsetLeft;\n  const Y_OFFSET = myCanvas.offsetTop;\n  const context = myCanvas.getContext('2d');\n\n  // Colors\n  const MAX_COLORS = 2 ** 11;\n  const DEFAULT_COLORS = [\n    { r: 0, g: 7, b: 100 },\n    { r: 32, g: 107, b: 203 },\n    { r: 237, g: 255, b: 255 },\n    { r: 255, g: 170, b: 0 },\n    { r: 0, g: 2, b: 0 },\n\n  ];\n  let currentColors = DEFAULT_COLORS.slice();\n  let colorArray = [];\n\n  // public methods\n  const get_max_wokers = () => MAX_WORKERS;\n  const get_def_max_iterations = () => DEF_MAX_ITERATIONS;\n  const get_def_escape_radius = () => DEF_ESCAPE_RADIUS;\n  const get_def_zoom_step = () => DEF_ZOOM_STEP;\n\n  // public methods option\n  const get_options = () => options;\n  const set_options_value = (key, value) => {\n    options[key] = value;\n  };\n\n  // public methods canvas\n  const get_canvas = () => myCanvas;\n  const get_drawing_context = () => context;\n  const get_canvas_width = () => CANVAS_WIDTH;\n  const get_canvas_height = () => CANVAS_HEIGHT;\n  const get_def_dimens = () => DEFAULT_DIMENS;\n  const get_x_offset = () => X_OFFSET;\n  const get_y_offset = () => Y_OFFSET;\n\n  // public methods for zoom\n  const get_pan_increment = () => PAN_INCREMENT;\n  const get_zoom_factor = () => zoomFactor;\n  const set_zoom_factor = (zf) => {\n    zoomFactor = zf;\n  };\n  const get_current_dimens = () => currentDimens;\n  const set_current_dimens = (dimens) => {\n    currentDimens = dimens;\n  };\n\n  const get_max_colors = () => MAX_COLORS;\n  const get_def_colors = () => DEFAULT_COLORS;\n  const get_current_colors = () => currentColors;\n  const set_current_colors = (colors) => {\n    currentColors = colors;\n  };\n  const set_current_color_single_color = (color, i) => {\n    currentColors[i] = color;\n  };\n  const get_color_array = () => colorArray;\n  const set_color_array = (array) => {\n    colorArray = array;\n  };\n\n\n  return {\n    get_max_wokers,\n    get_def_max_iterations,\n    get_def_escape_radius,\n    get_def_zoom_step,\n    get_options,\n    set_options_value,\n    get_canvas,\n    get_drawing_context,\n    get_canvas_width,\n    get_canvas_height,\n    get_def_dimens,\n    get_x_offset,\n    get_y_offset,\n    get_pan_increment,\n    get_zoom_factor,\n    set_zoom_factor,\n    get_current_dimens,\n    set_current_dimens,\n    get_max_colors,\n    get_def_colors,\n    get_current_colors,\n    set_current_colors,\n    set_current_color_single_color,\n    get_color_array,\n    set_color_array,\n  };\n}());\n\n\nfunction download() {\n  this.href = app.get.toDataURL('image/jpeg');\n}\n\n// Sets the key info in the info box\nfunction setInfo(dimens, userOptions) {\n  const dimenObj = {\n    0: () => document.getElementById('minReal'),\n    1: () => document.getElementById('maxReal'),\n    2: () => document.getElementById('minImag'),\n    3: () => document.getElementById('maxImag'),\n  };\n  // Iterate over the keys in the dimens object\n  for (let i = 0; i < Object.keys(dimens).length; i++) {\n    const fn = dimenObj[i];\n    if (fn) {\n      const dimenSpan = fn();\n      // Pull out the appropriate dimension\n      dimenSpan.textContent = dimens[Object.keys(dimens)[i]];\n    }\n  }\n\n  // Set options:\n  const optionsObj = {\n    0: () => document.getElementById('iterations'),\n    1: () => document.getElementById('escapeRadius'),\n    2: () => document.getElementById('zoomStep'),\n  };\n\n  for (let j = 0; j < Object.keys(userOptions).length; j++) {\n    const fn = (optionsObj[j]);\n    if (fn) {\n      const optionInput = fn();\n      optionInput.value = userOptions[Object.keys(userOptions)[j]];\n    }\n  }\n}\n\n\nfunction drawMandelbrot(dimens, userOptions) {\n  let {\n    minReal,\n    maxReal,\n    minImaginary,\n    maxImaginary,\n  } = dimens;\n  // Generate colors\n  app.set_color_array(createColors(app.get_max_colors(), app.get_current_colors()));\n  // Correct for aspect ratio\n  const ratio = Math.abs(dimens.maxReal - dimens.minReal)\n    / Math.abs(dimens.maxImaginary - dimens.minImaginary);\n  const sratio = app.get_canvas_width() / app.get_canvas_height();\n  if (sratio > ratio) {\n    const xf = sratio / ratio;\n    minReal *= xf;\n    maxReal *= xf;\n  } else {\n    const yf = ratio / sratio;\n    minImaginary *= yf;\n    maxImaginary *= yf;\n  }\n\n  // Calculate factors to convert X and Y to real and imaginary components of a compelx number\n  const realFactor = Utils.calcRealFactor(maxReal, minReal, app.get_canvas_width());\n  const imaginaryFactor = Utils.calcImaginaryFactor(\n    maxImaginary, minImaginary,\n    app.get_canvas_height(),\n  );\n  const workerFunction = function (e) {\n    const { points } = e.data;\n    for (let i = 0; i < points.length; i++) {\n      const { y, fillStyle } = points[i];\n      app.get_drawing_context().fillStyle = fillStyle;\n      app.get_drawing_context().fillRect(e.data.x, y, 1, 1);\n    }\n    let currentX = e.data.x;\n    // Start work on the column MAX_WORKERS down the axis\n    currentX += app.get_max_wokers();\n    // If we haven't reached the end of the canvas\n    if (currentX < app.get_canvas_width()) {\n      // Send a message to the current worker to work on the next x\n      this.postMessage({\n        options: userOptions,\n        x: currentX,\n        CANVAS_HEIGHT: app.get_canvas_height(),\n        colorArray: app.get_color_array(),\n        realFactor,\n        imaginaryFactor,\n        minReal,\n        maxReal,\n        minImaginary,\n        maxImaginary,\n      });\n    }\n  };\n  // Create worker threads and have each thread handle one column of data\n  for (let x = 0; x < app.get_max_wokers(); x++) {\n    const worker = new Worker();\n    worker.postMessage({\n      options: userOptions,\n      x,\n      CANVAS_HEIGHT: app.get_canvas_height(),\n      colorArray: app.get_color_array(),\n      realFactor,\n      imaginaryFactor,\n      minReal,\n      maxReal,\n      minImaginary,\n      maxImaginary,\n    });\n    worker.onmessage = workerFunction;\n  }\n  setInfo(app.get_current_dimens(), app.get_options());\n}\n\n\n// Get clicks on background canvas via bubbling\nconst body = document.getElementsByTagName('body')[0];\n\n// Handle zoom in\nbody.addEventListener('click', (e) => {\n  const zoomResults = Utils.handleZoom(\n    e,\n    app.get_options().zoomStep,\n    app.get_zoom_factor(),\n    app.get_current_dimens(), app.get_canvas_width(),\n    app.get_canvas_height(), app.get_x_offset(), app.get_y_offset(),\n  );\n  app.set_current_dimens(zoomResults.currentDimens);\n  app.set_zoom_factor(zoomResults.zoomFactor);\n  drawMandelbrot(app.get_current_dimens(), app.get_options());\n});\n\n// Handle zoom out\nbody.addEventListener('contextmenu', (e) => {\n  const zoomResults = Utils.handleZoom(\n    e,\n    1 / app.get_options().zoomStep,\n    app.get_zoom_factor(),\n    app.get_current_dimens(), app.get_canvas_width(),\n    app.get_canvas_height(), app.get_x_offset(), app.get_y_offset(),\n  );\n  app.set_current_dimens(zoomResults.currentDimens);\n  app.set_zoom_factor(zoomResults.zoomFactor);\n  drawMandelbrot(app.get_current_dimens(), app.get_options());\n});\n\n// Set download link\ndocument.getElementById('downloadLink').addEventListener('click', download, false);\n\n// Block all clicks on the control/info area\nconst elementsToBlock = document.getElementsByClassName('block');\nfor (let i = 0; i < elementsToBlock.length; i++) {\n  const el = elementsToBlock[i];\n  el.addEventListener('click', (event) => {\n    event.stopPropagation();\n  });\n}\n\n\n// handle color picking\nwindow.updateColor = function (colorData, gradientPosition) {\n  // Round values in color array, destructure and assign to r, g, b\n  const [r, g, b] = colorData.rgb.map(colorChannel => Math.round(colorChannel));\n  app.set_current_color_single_color({ r, g, b }, gradientPosition);\n  drawMandelbrot(app.get_current_dimens(), app.get_options());\n  document.getElementsByClassName('jscolor')[gradientPosition].jscolor.hide();\n};\n\n\nwindow.pan = function (e, direction) {\n  e.stopPropagation();\n  app.set_current_dimens(Utils.handlePan(\n    direction,\n    app.get_pan_increment(), app.get_current_dimens(),\n  ));\n  drawMandelbrot(app.get_current_dimens(), app.get_options());\n};\n\n// Update options\nwindow.updateMandelbrot = function () {\n  const userIterations = document.getElementById('iterations').value;\n  const escapeRadius = document.getElementById('escapeRadius').value;\n  const zoomStep = document.getElementById('zoomStep').value;\n  if (userIterations) {\n    app.set_options_value('iterations', parseInt(userIterations, 10) || app.get_def_max_iterations());\n  }\n  if (escapeRadius) {\n    app.set_options_value('escapeRadius', parseFloat(escapeRadius) || app.get_def_escape_radius());\n  }\n  if (zoomStep) {\n    app.set_options_value('zoomStep', parseFloat(zoomStep) || app.get_def_zoom_step());\n  }\n  drawMandelbrot(app.get_current_dimens(), app.get_options());\n};\n\nwindow.handleZoomStep = function () {\n  const zoomStep = document.getElementById('zoomStep').value;\n  if (zoomStep) {\n    app.set_options_value('zoomStep', parseFloat(zoomStep) || app.get_def_zoom_step());\n  }\n};\n\nwindow.reset = () => {\n  app.set_current_dimens({ ...app.get_def_dimens() });\n  app.set_current_colors(app.get_def_colors().slice());\n  app.set_options_value('iterations', app.get_def_max_iterations());\n  app.set_options_value('escapeRadius', app.get_def_escape_radius());\n  app.set_options_value('zoomStep', app.get_def_zoom_step());\n  const inputs = document.getElementsByClassName('jscolor');\n  for (let i = 0; i < inputs.length; i++) {\n    const input = inputs[i];\n    input.jscolor.fromRGB(\n      app.get_current_colors()[i].r,\n      app.get_current_colors()[i].g, app.get_current_colors()[i].b,\n    );\n  }\n  drawMandelbrot(app.get_current_dimens(), app.get_options());\n};\n\napp.set_current_dimens({ ...app.get_def_dimens() });\ndrawMandelbrot(app.get_current_dimens(), app.get_options());\n","// Source: https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\nexport default function createColors(maxColors, colors) {\n  const createInterpolant = function (xs, ys) {\n    let i = xs.length;\n    const { length } = xs;\n\n    // Deal with length issues\n    if (length !== ys.length) { throw new Error('Need an equal count of xs and ys.'); }\n    if (length === 0) { return function () { return 0; }; }\n    if (length === 1) {\n      // Impl: Precomputing the result prevents problems\n      // if ys is mutated later and allows garbage collection of ys\n      // Impl: Unary plus properly converts values to numbers\n      const result = +ys[0];\n      return function () { return result; };\n    }\n\n    // Rearrange xs and ys so that xs is sorted\n    const indexes = [];\n    for (i = 0; i < length; i++) { indexes.push(i); }\n    indexes.sort((a, b) => (xs[a] < xs[b] ? -1 : 1));\n    const oldXs = xs;\n    const oldYs = ys;\n    // Impl: Creating new arrays also prevents problems if the input arrays are mutated later\n    xs = []; ys = [];\n    // Impl: Unary plus properly converts values to numbers\n    for (i = 0; i < length; i++) { xs.push(+oldXs[indexes[i]]); ys.push(+oldYs[indexes[i]]); }\n\n    // Get consecutive differences and slopes\n    const dys = [];\n    const dxs = [];\n    const ms = [];\n    for (i = 0; i < length - 1; i++) {\n      const dx = xs[i + 1] - xs[i];\n      const dy = ys[i + 1] - ys[i];\n      dxs.push(dx); dys.push(dy); ms.push(dy / dx);\n    }\n\n    // Get degree-1 coefficients\n    const c1s = [ms[0]];\n    for (i = 0; i < dxs.length - 1; i++) {\n      const m = ms[i];\n      const mNext = ms[i + 1];\n      if (m * mNext <= 0) {\n        c1s.push(0);\n      } else {\n        const dx_ = dxs[i];\n        const dxNext = dxs[i + 1];\n        const common = dx_ + dxNext;\n        c1s.push(3 * common / ((common + dxNext) / m + (common + dx_) / mNext));\n      }\n    }\n    c1s.push(ms[ms.length - 1]);\n\n    // Get degree-2 and degree-3 coefficients\n    const c2s = [];\n    const c3s = [];\n    for (i = 0; i < c1s.length - 1; i++) {\n      const c1 = c1s[i];\n      const m_ = ms[i];\n      const invDx = 1 / dxs[i];\n      const common_ = c1 + c1s[i + 1] - m_ - m_;\n      c2s.push((m_ - c1 - common_) * invDx); c3s.push(common_ * invDx * invDx);\n    }\n\n    // Return interpolant function\n    return function (x) {\n      // The rightmost point in the dataset should give an exact result\n      let j = xs.length - 1;\n      if (x === xs[j]) { return ys[j]; }\n\n      // Search for the interval x is in,\n      // returning the corresponding y if x is one of the original xs\n      let low = 0;\n      let mid;\n      let high = c3s.length - 1;\n      while (low <= high) {\n        mid = Math.floor(0.5 * (low + high));\n        const xHere = xs[mid];\n        if (xHere < x) {\n          low = mid + 1;\n        } else if (xHere > x) {\n          high = mid - 1;\n        } else { return ys[mid]; }\n      }\n      j = Math.max(0, high);\n\n      // Interpolate\n      const diff = x - xs[j];\n      const diffSq = diff * diff;\n      return ys[j] + c1s[j] * diff + c2s[j] * diffSq + c3s[j] * diff * diffSq;\n    };\n  };\n\n\n  function createChannelArray(array, interpolant) {\n    for (let x = 0; x < 1; x += 1 / maxColors) {\n      const xSquared = interpolant(x);\n      array.push(xSquared);\n    }\n  }\n\n  const rArray = [];\n  const gArray = [];\n  const bArray = [];\n\n  createChannelArray(\n    rArray,\n    createInterpolant(\n      [0, 0.16, 0.42, 0.6425, 0.8575],\n      [colors[0].r, colors[1].r, colors[2].r, colors[3].r, colors[4].r],\n    ),\n  );\n  createChannelArray(\n    gArray,\n    createInterpolant(\n      [0, 0.16, 0.42, 0.6425, 0.8575],\n      [colors[0].g, colors[1].g, colors[2].g, colors[3].g, colors[4].g],\n    ),\n  );\n  createChannelArray(\n    bArray,\n    createInterpolant(\n      [0, 0.16, 0.42, 0.6425, 0.8575],\n      [colors[0].b, colors[1].b, colors[2].b, colors[3].b, colors[4].b],\n    ),\n  );\n\n  const colorArray = [];\n  for (let i = 0; i < bArray.length; i++) {\n    colorArray.push(`rgb(${rArray[i]},${gArray[i]},${bArray[i]})`);\n  }\n  return colorArray;\n}\n"],"sourceRoot":""}