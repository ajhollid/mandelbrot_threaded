{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/utils.js","webpack:///./src/scripts/mandelbrot.worker.js","webpack:///./src/scripts/mandelbrot.js","webpack:///./src/scripts/colors.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","calcRealFactor","maxReal","minReal","CANVAS_WIDTH","calcImaginaryFactor","maxImaginary","minImaginary","CANVAS_HEIGHT","interpolate","start","end","interpolation","handleZoom","event","zoomStep","zoomFactor","dimens","X_OFFSET","Y_OFFSET","newZoomFactor","currentDimens","preventDefault","realFactor","imaginaryFactor","mouseReal","mouseImaginary","newDimens","deltaReal","deltaImaginary","applyZoom","clientX","clientY","Worker","MAX_WORKERS","MAX_ITERATIONS","BAILOUT_RADIUS","window","innerWidth","innerHeight","DEFAULT_DIMENS","PAN_INCREMENT","MAX_COLORS","DEFAULT_COLORS","g","b","currentColors","slice","colorArray","myCanvas","document","getElementById","width","height","offsetLeft","offsetTop","context","getContext","drawMandelbrot","maxColors","colors","createInterpolant","xs","ys","length","Error","result","indexes","push","sort","a","oldXs","oldYs","dys","dxs","ms","dx","dy","c1s","mNext","dx_","dxNext","common","c2s","c3s","c1","m_","invDx","common_","x","j","mid","low","high","Math","floor","xHere","max","diff","diffSq","createChannelArray","array","interpolant","xSquared","rArray","gArray","bArray","createColors","ratio","abs","sratio","xf","yf","utils_default","workerFunction","e","points","data","y","fillStyle","fillRect","currentX","this","postMessage","worker","mandelbrot_worker_default","onmessage","dimenObj","0","1","2","3","keys","fn","textContent","setInfo","body","getElementsByTagName","addEventListener","zoomResults","elementsToBlock","getElementsByClassName","stopPropagation","updateColor","colorData","gradientPosition","rgb","map","colorChannel","round","jscolor","hide","pan","direction","increment","min","4","handlePan","reset","inputs","fromRGB"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,mBClFA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAAF,EAAAC,GAAA,EAGA,SAAAE,EAAAC,EAAAC,EAAAC,GACA,OAAAF,EAAAC,GAAA,EAGA,SAAAE,EAAAC,EAAAC,EAAAC,GACA,OAAAF,GAAAC,EAAAD,GAAAE,EAkDA5C,EAAAD,SACAkC,iBACAI,sBACAQ,WA5BA,SACAC,EACAC,EAAAC,EAAAC,EAAAb,EAAAI,EAAAU,EAAAC,GAEA,IAAAC,EAAAJ,EACAK,EAAAJ,EACAH,EAAAQ,iBACA,MAAAC,EAAAtB,EACAoB,EAAAnB,QACAmB,EAAAlB,QACAC,GAEAoB,EAAAnB,EACAgB,EAAAf,aACAe,EAAAd,aACAC,GAOA,OAAUa,cADVA,EA3CA,SAAAI,EAAAC,EAAAV,EAAAK,GACA,MAAAM,EAAAN,EAEAT,EAAA,EAAAI,EACAW,EAAAxB,QAAAM,EAAAgB,EAAAE,EAAAxB,QAAAS,GACAe,EAAAzB,QAAAO,EAAAgB,EAAAE,EAAAzB,QAAAU,GACAe,EAAApB,aAAAE,EAAAiB,EAAAC,EAAApB,aAAAK,GACAe,EAAArB,aAAAG,EAAAiB,EAAAC,EAAArB,aAAAM,GAGA,MAEAgB,GAFAD,EAAAxB,QAAAwB,EAAAzB,SAAA,EAEAuB,EACAI,GAFAF,EAAApB,aAAAoB,EAAArB,cAAA,EAEAoB,EAMA,OAJAC,EAAAxB,SAAAyB,EACAD,EAAAzB,SAAA0B,EACAD,EAAApB,cAAAsB,EACAF,EAAArB,cAAAuB,EACAF,EAwBAG,CAHAT,EAAAlB,SAAAW,EAAAiB,QAAAb,GAAAK,EACAF,EAAAd,cAAAO,EAAAkB,QAAAb,GAAAK,EACAJ,GAAAL,EACAM,GACUL,iCCxDVhD,EAAAD,QAAA,WACA,WAAAkE,OAAoBpE,EAAAkC,EAAuB,4GCI3C,MAAAmC,EAAA,EACAC,EAAA,IACAC,EAAA,IAGAhC,EAAAiC,OAAAC,WACA9B,EAAA6B,OAAAE,YACAC,GACArC,SAAA,EACAD,QAAA,IACAK,cAAA,IACAD,aAAA,KAGAmC,EAAA,IACA,IAAAzB,EAAA,EACAK,KAIA,MAAAqB,EAAA,KACAC,IACG5D,EAAA,EAAA6D,EAAA,EAAAC,EAAA,MACA9D,EAAA,GAAA6D,EAAA,IAAAC,EAAA,MACA9D,EAAA,IAAA6D,EAAA,IAAAC,EAAA,MACA9D,EAAA,IAAA6D,EAAA,IAAAC,EAAA,IACA9D,EAAA,EAAA6D,EAAA,EAAAC,EAAA,IAGH,IAAAC,EAAAH,EAAAI,QACAC,KAGA,MAAAC,EAAAC,SAAAC,eAAA,UACAF,EAAAG,MAAAhD,EACA6C,EAAAI,OAAA7C,EACA,MAAAU,EAAA+B,EAAAK,WACAnC,EAAA8B,EAAAM,UACAC,EAAAP,EAAAQ,WAAA,MAqBA,SAAAC,EAAAzC,GACA,IAAAd,QACAA,EAAAD,QACAA,EAAAK,aACAA,EAAAD,aACAA,GACGW,EAEH+B,ECvEe,SAAAW,EAAAC,GACf,MAAAC,EAAA,SAAAC,EAAAC,GACA,IAAA9F,EAAA6F,EAAAE,OACA,MAAAA,OAAWA,GAASF,EAGpB,GAAAE,IAAAD,EAAAC,OAA+B,UAAAC,MAAA,qCAC/B,OAAAD,EAAuB,kBAAqB,UAC5C,OAAAA,EAAA,CAIA,MAAAE,GAAAH,EAAA,GACA,kBAA0B,OAAAG,GAI1B,MAAAC,KACA,IAAAlG,EAAA,EAAeA,EAAA+F,EAAY/F,IAAOkG,EAAAC,KAAAnG,GAClCkG,EAAAE,KAAA,CAAAC,EAAAzB,IAAAiB,EAAAQ,GAAAR,EAAAjB,IAAA,KACA,MAAA0B,EAAAT,EACAU,EAAAT,EAIA,IAFAD,KAAYC,KAEZ9F,EAAA,EAAeA,EAAA+F,EAAY/F,IAAO6F,EAAAM,MAAAG,EAAAJ,EAAAlG,KAA6B8F,EAAAK,MAAAI,EAAAL,EAAAlG,KAG/D,MAAAwG,KACAC,KACAC,KACA,IAAA1G,EAAA,EAAeA,EAAA+F,EAAA,EAAgB/F,IAAA,CAC/B,MAAA2G,EAAAd,EAAA7F,EAAA,GAAA6F,EAAA7F,GACA4G,EAAAd,EAAA9F,EAAA,GAAA8F,EAAA9F,GACAyG,EAAAN,KAAAQ,GAAmBH,EAAAL,KAAAS,GAAcF,EAAAP,KAAAS,EAAAD,GAIjC,MAAAE,GAAAH,EAAA,IACA,IAAA1G,EAAA,EAAeA,EAAAyG,EAAAV,OAAA,EAAoB/F,IAAA,CACnC,MAAAI,EAAAsG,EAAA1G,GACA8G,EAAAJ,EAAA1G,EAAA,GACA,GAAAI,EAAA0G,GAAA,EACAD,EAAAV,KAAA,OACO,CACP,MAAAY,EAAAN,EAAAzG,GACAgH,EAAAP,EAAAzG,EAAA,GACAiH,EAAAF,EAAAC,EACAH,EAAAV,KAAA,EAAAc,MAAAD,GAAA5G,GAAA6G,EAAAF,GAAAD,KAGAD,EAAAV,KAAAO,IAAAX,OAAA,IAGA,MAAAmB,KACAC,KACA,IAAAnH,EAAA,EAAeA,EAAA6G,EAAAd,OAAA,EAAoB/F,IAAA,CACnC,MAAAoH,EAAAP,EAAA7G,GACAqH,EAAAX,EAAA1G,GACAsH,EAAA,EAAAb,EAAAzG,GACAuH,EAAAH,EAAAP,EAAA7G,EAAA,GAAAqH,IACAH,EAAAf,MAAAkB,EAAAD,EAAAG,GAAAD,GAA4CH,EAAAhB,KAAAoB,EAAAD,KAI5C,gBAAAE,GAEA,IAAAC,EAAA5B,EAAAE,OAAA,EACA,GAAAyB,IAAA3B,EAAA4B,GAAwB,OAAA3B,EAAA2B,GAIxB,IACAC,EADAC,EAAA,EAEAC,EAAAT,EAAApB,OAAA,EACA,KAAA4B,GAAAC,GAAA,CACAF,EAAAG,KAAAC,MAAA,IAAAH,EAAAC,IACA,MAAAG,EAAAlC,EAAA6B,GACA,GAAAK,EAAAP,EACAG,EAAAD,EAAA,MACS,MAAAK,EAAAP,GAEO,OAAA1B,EAAA4B,GADhBE,EAAAF,EAAA,GAGAD,EAAAI,KAAAG,IAAA,EAAAJ,GAGA,MAAAK,EAAAT,EAAA3B,EAAA4B,GACAS,EAAAD,IACA,OAAAnC,EAAA2B,GAAAZ,EAAAY,GAAAQ,EAAAf,EAAAO,GAAAS,EAAAf,EAAAM,GAAAQ,EAAAC,IAKA,SAAAC,EAAAC,EAAAC,GACA,QAAAb,EAAA,EAAmBA,EAAA,EAAOA,GAAA,EAAA9B,EAAA,CAC1B,MAAA4C,EAAAD,EAAAb,GACAY,EAAAjC,KAAAmC,IAIA,MAAAC,KACAC,KACAC,KAEAN,EACAI,EACA3C,GACA,wBACAD,EAAA,GAAA7E,EAAA6E,EAAA,GAAA7E,EAAA6E,EAAA,GAAA7E,EAAA6E,EAAA,GAAA7E,EAAA6E,EAAA,GAAA7E,KAGAqH,EACAK,EACA5C,GACA,wBACAD,EAAA,GAAAhB,EAAAgB,EAAA,GAAAhB,EAAAgB,EAAA,GAAAhB,EAAAgB,EAAA,GAAAhB,EAAAgB,EAAA,GAAAhB,KAGAwD,EACAM,EACA7C,GACA,wBACAD,EAAA,GAAAf,EAAAe,EAAA,GAAAf,EAAAe,EAAA,GAAAf,EAAAe,EAAA,GAAAf,EAAAe,EAAA,GAAAf,KAIA,MAAAG,KACA,QAAA/E,EAAA,EAAiBA,EAAAyI,EAAA1C,OAAmB/F,IACpC+E,EAAAoB,YAA2BoC,EAAAvI,MAAawI,EAAAxI,MAAayI,EAAAzI,OAErD,OAAA+E,ED5De2D,CAAYjE,EAAAI,GAE3B,MAAA8D,EAAAd,KAAAe,IAAA5F,EAAAf,QAAAe,EAAAd,SACA2F,KAAAe,IAAA5F,EAAAX,aAAAW,EAAAV,cACAuG,EAAA1G,EAAAI,EACA,GAAAsG,EAAAF,EAAA,CACA,MAAAG,EAAAD,EAAAF,EACAzG,GAAA4G,EACA7G,GAAA6G,MACG,CACH,MAAAC,EAAAJ,EAAAE,EACAvG,GAAAyG,EACA1G,GAAA0G,EAIA,MAAAzF,EAAqB0F,EAAA3C,EAAKrE,eAAAC,EAAAC,EAAAC,GAC1BoB,EAA0ByF,EAAA3C,EAAKjE,oBAAAC,EAAAC,EAAAC,GAC/B0G,EAAA,SAAAC,GACA,MAAAC,OAAWA,GAASD,EAAAE,KACpB,QAAApJ,EAAA,EAAmBA,EAAAmJ,EAAApD,OAAmB/F,IAAA,CACtC,MAAAqJ,EAAaA,EAAAC,aAAeH,EAAAnJ,GAC5BuF,EAAA+D,YACA/D,EAAAgE,SAAAL,EAAAE,KAAA5B,EAAA6B,EAAA,KAEA,IAAAG,EAAAN,EAAAE,KAAA5B,GAEAgC,GAAAvF,GAEA9B,GAEAsH,KAAAC,aACAxF,iBACAC,iBACAqD,EAAAgC,EACAjH,gBACAwC,aACAzB,aACAC,kBACArB,UACAD,UACAK,eACAD,kBAKA,QAAAmF,EAAA,EAAiBA,EAAAvD,EAAiBuD,IAAA,CAClC,MAAAmC,EAAA,IAAuBC,EAAAvD,EACvBsD,EAAAD,aACAxF,iBACAC,iBACAqD,IACAjF,gBACAwC,aACAzB,aACAC,kBACArB,UACAD,UACAK,eACAD,iBAEAsH,EAAAE,UAAAZ,GAxFA,SAAAjG,GACA,MAAA8G,GACAC,EAAA,IAAA9E,SAAAC,eAAA,WACA8E,EAAA,IAAA/E,SAAAC,eAAA,WACA+E,EAAA,IAAAhF,SAAAC,eAAA,WACAgF,EAAA,IAAAjF,SAAAC,eAAA,YAGA,QAAAlF,EAAA,EAAiBA,EAAAU,OAAAyJ,KAAAnH,GAAA+C,OAAgC/F,IAAA,CACjD,MAAAoK,EAAAN,EAAA9J,GACAoK,IACAA,IAEAC,YAAArH,EAAAtC,OAAAyJ,KAAAnH,GAAAhD,MA6EAsK,CAAAlH,GAKA,MAAAmH,EAAAtF,SAAAuF,qBAAA,WAGAD,EAAAE,iBAAA,QAAAvB,IACA,MAAAwB,EAAsB1B,EAAA3C,EAAKzD,WAC3BsG,EAhIA,IAiIAnG,EAAAK,EAAAjB,EAAAI,EAAAU,EAAAC,KAEIE,gBAAAL,cAA4B2H,GAChCjF,EAAArC,KAIAmH,EAAAE,iBAAA,cAAAvB,IACA,MAAAwB,EAAsB1B,EAAA3C,EAAKzD,WAC3BsG,EACA,EA3IA,IA2IAnG,EAAAK,EAAAjB,EAAAI,EAAAU,EAAAC,KAEIE,gBAAAL,cAA4B2H,GAChCjF,EAAArC,KAIA,MAAAuH,EAAA1F,SAAA2F,uBAAA,SACA,QAAA5K,EAAA,EAAeA,EAAA2K,EAAA5E,OAA4B/F,IAAA,CAC3C2K,EAAA3K,GACAyK,iBAAA,QAAA5H,IACAA,EAAAgI,oBAMAzG,OAAA0G,YAAA,SAAAC,EAAAC,GAEA,MAAAlK,EAAA6D,EAAAC,GAAAmG,EAAAE,IAAAC,IAAAC,GAAAtD,KAAAuD,MAAAD,IACAtG,EAAAmG,IAAqClK,IAAA6D,IAAAC,KACrCa,EAAArC,GACA6B,SAAA2F,uBAAA,WAAAI,GAAAK,QAAAC,QAyCAlH,OAAAmH,IAAA,SAAArC,EAAAsC,GACAtC,EAAA2B,kBAtCA,SAAAW,GAEA,MAAAC,EAAA5D,KAAA6D,IACA7D,KAAAe,IAAAxF,EAAAd,aAAAkC,GACAqD,KAAAe,IAAAxF,EAAAf,aAAAmC,IA0BA4F,GAtBAL,EAAA,KAEA3G,EAAAd,cAAAmJ,EACArI,EAAAf,cAAAoJ,GAEAzB,EAAA,KAEA5G,EAAAlB,SAAAuJ,EACArI,EAAAnB,SAAAwJ,GAEAxB,EAAA,KAEA7G,EAAAd,cAAAmJ,EACArI,EAAAf,cAAAoJ,GAEAE,EAAA,KAEAvI,EAAAlB,SAAAuJ,EACArI,EAAAnB,SAAAwJ,IAIAD,GACApB,IACAA,IACA3E,EAAArC,IAMAwI,CAAAJ,IAGApH,OAAAyH,MAAA,MACAzI,MAAmBmB,GACnBM,EAAAH,EAAAI,QACA,MAAAgH,EAAA7G,SAAA2F,uBAAA,WACA,QAAA5K,EAAA,EAAiBA,EAAA8L,EAAA/F,OAAmB/F,IAAA,CACpC8L,EAAA9L,GACAqL,QAAAU,QAAAlH,EAAA7E,GAAAc,EAAA+D,EAAA7E,GAAA2E,EAAAE,EAAA7E,GAAA4E,GAEAa,EAAArC,KAIAqC,EADArC,MAAiBmB","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","function calcRealFactor(maxReal, minReal, CANVAS_WIDTH) {\n  return (maxReal - minReal) / (CANVAS_WIDTH);\n}\n\nfunction calcImaginaryFactor(maxImaginary, minImaginary, CANVAS_HEIGHT) {\n  return (maxImaginary - minImaginary) / (CANVAS_HEIGHT);\n}\n\nfunction interpolate(start, end, interpolation) {\n  return start + ((end - start) * interpolation);\n}\n\nfunction applyZoom(mouseReal, mouseImaginary, zoomFactor, currentDimens) {\n  const newDimens = currentDimens;\n  // Create a new zoomed in view rectangle\n  const interpolation = 1.0 / zoomFactor;\n  newDimens.minReal = interpolate(mouseReal, newDimens.minReal, interpolation);\n  newDimens.maxReal = interpolate(mouseReal, newDimens.maxReal, interpolation);\n  newDimens.minImaginary = interpolate(mouseImaginary, newDimens.minImaginary, interpolation);\n  newDimens.maxImaginary = interpolate(mouseImaginary, newDimens.maxImaginary, interpolation);\n\n  // Center on the mouse click\n  const centerReal = (newDimens.minReal + newDimens.maxReal) / 2;\n  const centerImaginary = (newDimens.minImaginary + newDimens.maxImaginary) / 2;\n  const deltaReal = centerReal - mouseReal;\n  const deltaImaginary = centerImaginary - mouseImaginary;\n\n  newDimens.minReal -= deltaReal;\n  newDimens.maxReal -= deltaReal;\n  newDimens.minImaginary -= deltaImaginary;\n  newDimens.maxImaginary -= deltaImaginary;\n  return newDimens;\n}\n\nfunction handleZoom(\n  event,\n  zoomStep, zoomFactor, dimens, CANVAS_WIDTH, CANVAS_HEIGHT, X_OFFSET, Y_OFFSET,\n) {\n  let newZoomFactor = zoomFactor;\n  let currentDimens = dimens;\n  event.preventDefault();\n  const realFactor = calcRealFactor(\n    currentDimens.maxReal,\n    currentDimens.minReal,\n    CANVAS_WIDTH,\n  );\n  const imaginaryFactor = calcImaginaryFactor(\n    currentDimens.maxImaginary,\n    currentDimens.minImaginary,\n    CANVAS_HEIGHT,\n  );\n\n  const mouseReal = currentDimens.minReal + (event.clientX - X_OFFSET) * realFactor;\n  const mouseImaginary = currentDimens.minImaginary + (event.clientY - Y_OFFSET) * imaginaryFactor;\n  newZoomFactor *= zoomStep;\n  currentDimens = applyZoom(mouseReal, mouseImaginary, newZoomFactor, currentDimens);\n  return { currentDimens, zoomFactor };\n}\n\nmodule.exports = {\n  calcRealFactor,\n  calcImaginaryFactor,\n  handleZoom,\n};\n\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"ae2c12d3e5c1ec0f53f8.worker.js\");\n};","import createColors from './colors';\nimport Worker from './mandelbrot.worker';\nimport Utils from './utils';\n\n// Key values for generating set\nconst MAX_WORKERS = 6;\nconst MAX_ITERATIONS = 1000;\nconst BAILOUT_RADIUS = 2 ** 8;\n\n// Dimens for drawing\nconst CANVAS_WIDTH = window.innerWidth;\nconst CANVAS_HEIGHT = window.innerHeight;\nconst DEFAULT_DIMENS = {\n  minReal: -2,\n  maxReal: 1.3,\n  minImaginary: -1.4,\n  maxImaginary: 1.5,\n};\nconst ZOOM_STEP = 1.5;\nconst PAN_INCREMENT = 0.02;\nlet zoomFactor = 1;\nlet currentDimens = {};\n\n\n// Colors\nconst MAX_COLORS = 2 ** 11;\nconst DEFAULT_COLORS = [\n  { r: 0, g: 7, b: 100 },\n  { r: 32, g: 107, b: 203 },\n  { r: 237, g: 255, b: 255 },\n  { r: 255, g: 170, b: 0 },\n  { r: 0, g: 2, b: 0 },\n\n];\nlet currentColors = DEFAULT_COLORS.slice();\nlet colorArray = [];\n\n// Set up canvas\nconst myCanvas = document.getElementById('canvas');\nmyCanvas.width = CANVAS_WIDTH;\nmyCanvas.height = CANVAS_HEIGHT;\nconst X_OFFSET = myCanvas.offsetLeft;\nconst Y_OFFSET = myCanvas.offsetTop;\nconst context = myCanvas.getContext('2d');\n\n// Sets the key info in the info box\nfunction setInfo(dimens) {\n  const dimenObj = {\n    0: () => document.getElementById('minReal'),\n    1: () => document.getElementById('maxReal'),\n    2: () => document.getElementById('minImag'),\n    3: () => document.getElementById('maxImag'),\n  };\n  // Iterate over the keys in the dimens object\n  for (let i = 0; i < Object.keys(dimens).length; i++) {\n    const fn = dimenObj[i];\n    if (fn) {\n      const dimenSpan = fn();\n      // Pull out the appropriate dimension\n      dimenSpan.textContent = dimens[Object.keys(dimens)[i]];\n    }\n  }\n}\n\nfunction drawMandelbrot(dimens) {\n  let {\n    minReal,\n    maxReal,\n    minImaginary,\n    maxImaginary,\n  } = dimens;\n  // Generate colors\n  colorArray = createColors(MAX_COLORS, currentColors);\n  // Correct for aspect ratio\n  const ratio = Math.abs(dimens.maxReal - dimens.minReal)\n    / Math.abs(dimens.maxImaginary - dimens.minImaginary);\n  const sratio = CANVAS_WIDTH / CANVAS_HEIGHT;\n  if (sratio > ratio) {\n    const xf = sratio / ratio;\n    minReal *= xf;\n    maxReal *= xf;\n  } else {\n    const yf = ratio / sratio;\n    minImaginary *= yf;\n    maxImaginary *= yf;\n  }\n\n  // Calculate factors to convert X and Y to real and imaginary components of a compelx number\n  const realFactor = Utils.calcRealFactor(maxReal, minReal, CANVAS_WIDTH);\n  const imaginaryFactor = Utils.calcImaginaryFactor(maxImaginary, minImaginary, CANVAS_HEIGHT);\n  const workerFunction = function (e) {\n    const { points } = e.data;\n    for (let i = 0; i < points.length; i++) {\n      const { y, fillStyle } = points[i];\n      context.fillStyle = fillStyle;\n      context.fillRect(e.data.x, y, 1, 1);\n    }\n    let currentX = e.data.x;\n    // Start work on the column MAX_WORKERS down the axis\n    currentX += MAX_WORKERS;\n    // If we haven't reached the end of the canvas\n    if (currentX < CANVAS_WIDTH) {\n      // Send a message to the current worker to work on the next x\n      this.postMessage({\n        MAX_ITERATIONS,\n        BAILOUT_RADIUS,\n        x: currentX,\n        CANVAS_HEIGHT,\n        colorArray,\n        realFactor,\n        imaginaryFactor,\n        minReal,\n        maxReal,\n        minImaginary,\n        maxImaginary,\n      });\n    }\n  };\n  // Create worker threads and have each thread handle one column of data\n  for (let x = 0; x < MAX_WORKERS; x++) {\n    const worker = new Worker();\n    worker.postMessage({\n      MAX_ITERATIONS,\n      BAILOUT_RADIUS,\n      x,\n      CANVAS_HEIGHT,\n      colorArray,\n      realFactor,\n      imaginaryFactor,\n      minReal,\n      maxReal,\n      minImaginary,\n      maxImaginary,\n    });\n    worker.onmessage = workerFunction;\n  }\n  setInfo(currentDimens);\n}\n\n\n// Get clicks on background canvas via bubbling\nconst body = document.getElementsByTagName('body')[0];\n\n// Handle zoom in\nbody.addEventListener('click', (e) => {\n  const zoomResults = Utils.handleZoom(\n    e,\n    ZOOM_STEP, zoomFactor, currentDimens, CANVAS_WIDTH, CANVAS_HEIGHT, X_OFFSET, Y_OFFSET,\n  );\n  ({ currentDimens, zoomFactor } = zoomResults);\n  drawMandelbrot(currentDimens);\n});\n\n// Handle zoom out\nbody.addEventListener('contextmenu', (e) => {\n  const zoomResults = Utils.handleZoom(\n    e,\n    1 / ZOOM_STEP, zoomFactor, currentDimens, CANVAS_WIDTH, CANVAS_HEIGHT, X_OFFSET, Y_OFFSET,\n  );\n  ({ currentDimens, zoomFactor } = zoomResults);\n  drawMandelbrot(currentDimens);\n});\n\n// Block all clicks on the control/info area\nconst elementsToBlock = document.getElementsByClassName('block');\nfor (let i = 0; i < elementsToBlock.length; i++) {\n  const el = elementsToBlock[i];\n  el.addEventListener('click', (event) => {\n    event.stopPropagation();\n  });\n}\n\n\n// handle color picking\nwindow.updateColor = function (colorData, gradientPosition) {\n  // Round values in color array, destructure and assign to r, g, b\n  const [r, g, b] = colorData.rgb.map(colorChannel => Math.round(colorChannel));\n  currentColors[gradientPosition] = { r, g, b };\n  drawMandelbrot(currentDimens);\n  document.getElementsByClassName('jscolor')[gradientPosition].jscolor.hide();\n};\n\n// Handles panning around the image via control buttons\nfunction handlePan(direction) {\n  // Get the min increment to pan by\n  const increment = Math.min(\n    Math.abs(currentDimens.minImaginary * PAN_INCREMENT),\n    Math.abs(currentDimens.maxImaginary * PAN_INCREMENT),\n  );\n  // Pan object literal for lookup\n  const panTypes = {\n    0: () => {\n      // up\n      currentDimens.minImaginary += increment;\n      currentDimens.maxImaginary += increment;\n    },\n    1: () => {\n      // right\n      currentDimens.minReal += increment;\n      currentDimens.maxReal += increment;\n    },\n    2: () => {\n      // down\n      currentDimens.minImaginary -= increment;\n      currentDimens.maxImaginary -= increment;\n    },\n    4: () => {\n      // left\n      currentDimens.minReal -= increment;\n      currentDimens.maxReal -= increment;\n    },\n  };\n\n  const fn = panTypes[direction];\n  if (fn) {\n    fn();\n    drawMandelbrot(currentDimens);\n  }\n}\n\nwindow.pan = function (e, direction) {\n  e.stopPropagation();\n  handlePan(direction);\n};\n\nwindow.reset = () => {\n  currentDimens = { ...DEFAULT_DIMENS };\n  currentColors = DEFAULT_COLORS.slice();\n  const inputs = document.getElementsByClassName('jscolor');\n  for (let i = 0; i < inputs.length; i++) {\n    const input = inputs[i];\n    input.jscolor.fromRGB(currentColors[i].r, currentColors[i].g, currentColors[i].b);\n  }\n  drawMandelbrot(currentDimens);\n};\n\ncurrentDimens = { ...DEFAULT_DIMENS };\ndrawMandelbrot(currentDimens);\n","// Source: https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\nexport default function createColors(maxColors, colors) {\n  const createInterpolant = function (xs, ys) {\n    let i = xs.length;\n    const { length } = xs;\n\n    // Deal with length issues\n    if (length !== ys.length) { throw new Error('Need an equal count of xs and ys.'); }\n    if (length === 0) { return function () { return 0; }; }\n    if (length === 1) {\n      // Impl: Precomputing the result prevents problems\n      // if ys is mutated later and allows garbage collection of ys\n      // Impl: Unary plus properly converts values to numbers\n      const result = +ys[0];\n      return function () { return result; };\n    }\n\n    // Rearrange xs and ys so that xs is sorted\n    const indexes = [];\n    for (i = 0; i < length; i++) { indexes.push(i); }\n    indexes.sort((a, b) => (xs[a] < xs[b] ? -1 : 1));\n    const oldXs = xs;\n    const oldYs = ys;\n    // Impl: Creating new arrays also prevents problems if the input arrays are mutated later\n    xs = []; ys = [];\n    // Impl: Unary plus properly converts values to numbers\n    for (i = 0; i < length; i++) { xs.push(+oldXs[indexes[i]]); ys.push(+oldYs[indexes[i]]); }\n\n    // Get consecutive differences and slopes\n    const dys = [];\n    const dxs = [];\n    const ms = [];\n    for (i = 0; i < length - 1; i++) {\n      const dx = xs[i + 1] - xs[i];\n      const dy = ys[i + 1] - ys[i];\n      dxs.push(dx); dys.push(dy); ms.push(dy / dx);\n    }\n\n    // Get degree-1 coefficients\n    const c1s = [ms[0]];\n    for (i = 0; i < dxs.length - 1; i++) {\n      const m = ms[i];\n      const mNext = ms[i + 1];\n      if (m * mNext <= 0) {\n        c1s.push(0);\n      } else {\n        const dx_ = dxs[i];\n        const dxNext = dxs[i + 1];\n        const common = dx_ + dxNext;\n        c1s.push(3 * common / ((common + dxNext) / m + (common + dx_) / mNext));\n      }\n    }\n    c1s.push(ms[ms.length - 1]);\n\n    // Get degree-2 and degree-3 coefficients\n    const c2s = [];\n    const c3s = [];\n    for (i = 0; i < c1s.length - 1; i++) {\n      const c1 = c1s[i];\n      const m_ = ms[i];\n      const invDx = 1 / dxs[i];\n      const common_ = c1 + c1s[i + 1] - m_ - m_;\n      c2s.push((m_ - c1 - common_) * invDx); c3s.push(common_ * invDx * invDx);\n    }\n\n    // Return interpolant function\n    return function (x) {\n      // The rightmost point in the dataset should give an exact result\n      let j = xs.length - 1;\n      if (x === xs[j]) { return ys[j]; }\n\n      // Search for the interval x is in,\n      // returning the corresponding y if x is one of the original xs\n      let low = 0;\n      let mid;\n      let high = c3s.length - 1;\n      while (low <= high) {\n        mid = Math.floor(0.5 * (low + high));\n        const xHere = xs[mid];\n        if (xHere < x) {\n          low = mid + 1;\n        } else if (xHere > x) {\n          high = mid - 1;\n        } else { return ys[mid]; }\n      }\n      j = Math.max(0, high);\n\n      // Interpolate\n      const diff = x - xs[j];\n      const diffSq = diff * diff;\n      return ys[j] + c1s[j] * diff + c2s[j] * diffSq + c3s[j] * diff * diffSq;\n    };\n  };\n\n\n  function createChannelArray(array, interpolant) {\n    for (let x = 0; x < 1; x += 1 / maxColors) {\n      const xSquared = interpolant(x);\n      array.push(xSquared);\n    }\n  }\n\n  const rArray = [];\n  const gArray = [];\n  const bArray = [];\n\n  createChannelArray(\n    rArray,\n    createInterpolant(\n      [0, 0.16, 0.42, 0.6425, 0.8575],\n      [colors[0].r, colors[1].r, colors[2].r, colors[3].r, colors[4].r],\n    ),\n  );\n  createChannelArray(\n    gArray,\n    createInterpolant(\n      [0, 0.16, 0.42, 0.6425, 0.8575],\n      [colors[0].g, colors[1].g, colors[2].g, colors[3].g, colors[4].g],\n    ),\n  );\n  createChannelArray(\n    bArray,\n    createInterpolant(\n      [0, 0.16, 0.42, 0.6425, 0.8575],\n      [colors[0].b, colors[1].b, colors[2].b, colors[3].b, colors[4].b],\n    ),\n  );\n\n  const colorArray = [];\n  for (let i = 0; i < bArray.length; i++) {\n    colorArray.push(`rgb(${rArray[i]},${gArray[i]},${bArray[i]})`);\n  }\n  return colorArray;\n}\n"],"sourceRoot":""}